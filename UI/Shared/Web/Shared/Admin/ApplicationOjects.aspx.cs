using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Shared.WebCommon.UI.Web;
using System.Data;
using System.Web.UI.HtmlControls;
using Framework.UI.Web.BaseClasses;

namespace Shared.UI.Web.Admin
{
	public partial class ApplicationOjects : Framework.UI.Web.BaseClasses.PageBasePage
    {

        #region Methods

        private void LoadApplicationObjects()
        {
            if (Application.Count > 0)
            {
                foreach (var key in Application.Keys)
                {
                    var linkButton = new LinkButton();
                    linkButton.Text = Convert.ToString(key);
                    linkButton.Click += new EventHandler(linkButton_Click);

					var innerDiv = new HtmlGenericControl("div");
					var divider = new HtmlGenericControl("div");
					var li = new HtmlGenericControl("li");
					innerDiv.Attributes.CssStyle.Add("height", "20px");
					innerDiv.Attributes.CssStyle.Add("width", "40px");
					divider.Attributes.CssStyle.Add("height", "5px");
					divider.Attributes.CssStyle.Add("width", "auto");
					divider.Attributes.CssStyle.Add("display", "inline-block");
					innerDiv.Controls.Add(linkButton);
					divObjects.Controls.Add(innerDiv);
					divObjects.Controls.Add(divider);
                }
                LoadApplicationObjectValue(Application.Keys[0]);
            }
        }

        private void LoadApplicationObjectValue(string applicationKey)
        {
			divObjects2.InnerText = applicationKey;
            divValue.InnerHtml = String.Empty;
            var applicationValues = Application[applicationKey];
            var objType = applicationValues.GetType().Name;
            if (applicationValues is int || applicationValues is string || applicationValues is bool)
            {
                divValue.InnerText = Convert.ToString(applicationValues);
            }
            else if (applicationValues is DataTable || applicationValues is List<ApplicationUserRole> || applicationValues is List<UPreference>)
            {
                var gv = new GridView();
                gv.AutoGenerateColumns = true;
                gv.AutoGenerateDeleteButton = false;
                gv.AutoGenerateEditButton = false;
                gv.AutoGenerateSelectButton = false;
                gv.Style.Add("table-layout", "fixed");
                gv.Width = Unit.Parse("900px");
                gv.DataSource = applicationValues;
                gv.DataBind();
                divValue.Controls.Add(gv);
            }
            else if (applicationValues is DataSet)
            {
                var ds = (DataSet)applicationValues;
                foreach (DataTable dt in ds.Tables)
                {
                    var gv = new GridView();
                    gv.AutoGenerateColumns = true;
                    gv.AutoGenerateDeleteButton = false;
                    gv.AutoGenerateEditButton = false;
                    gv.AutoGenerateSelectButton = false;
                    gv.Style.Add("table-layout", "fixed");
                    gv.Width = Unit.Parse("900px");
                    gv.DataSource = dt;
                    gv.DataBind();
                    divValue.Controls.Add(gv);
                }
            }
            lblObjectType.Text = objType;
        }

        #endregion

        #region Events

        protected override void OnInit(EventArgs e)
        {
            LoadApplicationObjects();

			SettingCategory = "ApplicationObjectsDefaultView";
			BreadCrumbObject = Master.BreadCrumbObject;
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {

            }
        }

        void linkButton_Click(object sender, EventArgs e)
        {
            var btn = (LinkButton)sender;
            var applicationKey = btn.Text;
            LoadApplicationObjectValue(applicationKey);
        }

        #endregion

    }
}