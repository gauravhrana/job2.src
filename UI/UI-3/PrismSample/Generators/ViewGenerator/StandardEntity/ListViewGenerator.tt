<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#+	

	public void GenerateCodeBehindFileForListView(string entityName, string viewNameSpace, string viewModelNameSpace)
	{
		WriteLine("using " + viewModelNameSpace + ";");
		WriteLine("using System.Windows.Controls;");

		WriteLine(string.Empty);
		WriteLine("namespace " + viewNameSpace);
		WriteLine("{");
		
			PushIndent("\t");
			WriteLine(string.Empty);
			WriteLine("public partial class " + entityName + "ListView : UserControl");
			WriteLine("{");

				PushIndent("\t");
				WriteLine("public " + entityName + "ListView(" + entityName + "ListViewModel viewModel)");
				WriteLine("{");
					
					PushIndent("\t");
					WriteLine("InitializeComponent();");
					WriteLine("this.DataContext = viewModel;");
					PopIndent();

				WriteLine("}");
				PopIndent();

			WriteLine("}");
			PopIndent();

		WriteLine("}");
	}

	public void GenerateXAMLFileForListView(string entityName, string viewNameSpace, string viewModelNameSpace)
	{
		WriteLine("<UserControl x:Class='" + viewNameSpace + "." + entityName + "ListView'");
        WriteLine("     xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'");
        WriteLine("     xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'");
        WriteLine("     xmlns:mc='http://schemas.openxmlformats.org/markup-compatibility/2006' ");
        WriteLine("     xmlns:d='http://schemas.microsoft.com/expression/blend/2008' ");
        WriteLine("     xmlns:local='clr-namespace:" + viewNameSpace + "'             ");
        WriteLine("     xmlns:inf='clr-namespace:PrismSample.Infrastructure.Extensions;assembly=PrismSample.Infrastructure'");
        WriteLine("     xmlns:i='http://schemas.microsoft.com/expression/2010/interactivity'");
        WriteLine("     xmlns:xctk='http://schemas.xceed.com/wpf/xaml/toolkit'");
        WriteLine("     xmlns:prism='http://prismlibrary.com/'");
        WriteLine("     mc:Ignorable='d' ");
        WriteLine("     d:DesignHeight='600' d:DesignWidth='600'>");

			WriteLine(string.Empty);
			PushIndent("\t");
			WriteLine("<Grid x:Name='LayoutRoot'>");
				
				RenderGrid(entityName);

			WriteLine("</Grid>");
			PopIndent();

		WriteLine("</UserControl>");
	}

	public void RenderGrid(string entityName)
	{
		WriteLine("<Grid.Background>");
			
			PushIndent("\t");
            WriteLine("<LinearGradientBrush EndPoint='0.5,1' StartPoint='0.5,0'>");
				
				PushIndent("\t");
                WriteLine("<GradientStop Color='#FF7B97D4' />");
                WriteLine("<GradientStop Color='#FF244C8D' Offset='1' />");
				PopIndent();
				
            WriteLine("</LinearGradientBrush>");
			PopIndent();

        WriteLine("</Grid.Background>");
        WriteLine("<Grid.ColumnDefinitions>");
			
			PushIndent("\t");
            WriteLine("<ColumnDefinition Width='*' />");
            WriteLine("<ColumnDefinition Width='*' />");
			PopIndent();

        WriteLine("</Grid.ColumnDefinitions>");
        WriteLine("<Grid.RowDefinitions>");
			
			PushIndent("\t");
            WriteLine("<RowDefinition Height='Auto' />");
            WriteLine("<RowDefinition Height='Auto' />");
            WriteLine("<RowDefinition Height='Auto' />");
            WriteLine("<RowDefinition Height='*' />");
            WriteLine("<RowDefinition Height='Auto' />");
            WriteLine("<RowDefinition Height='Auto' />");
			PopIndent();

        WriteLine("</Grid.RowDefinitions>");

		WriteLine(string.Empty);
        WriteLine("<TextBlock Grid.Row='0' Text='" + entityName + " List View' TextWrapping='Wrap' Grid.RowSpan='1' Grid.ColumnSpan='2' FontSize='18' Foreground='#FF2F3806' Margin='8,8,8,8' />");

		RenderSearchControl(entityName);

		WriteLine(string.Empty);
		WriteLine("<StackPanel HorizontalAlignment='Right' Grid.Row='2' VerticalAlignment='Top' Grid.ColumnSpan='2'>");
        WriteLine("    <ComboBox x:Name='comboBox' ItemsSource='{Binding FCModes}' DisplayMemberPath='Name' Width='200' Margin='5'");
        WriteLine("        SelectedValuePath='FieldConfigurationModeId' SelectedValue='{Binding SelectedFCMode}'  />");
        WriteLine("</StackPanel>");

		RenderResultGrid(entityName);

		WriteLine(string.Empty);
		WriteLine("<Button x:Name='button' Content='Add " + entityName + "' Grid.Row='4' Command='{Binding AddCommand}' Margin='10' HorizontalAlignment='Left' VerticalAlignment='Top' Width='75'/>");
		WriteLine(string.Empty);
	}

	public void RenderSearchControl(string entityName)
	{
		WriteLine(string.Empty);
		WriteLine("<StackPanel HorizontalAlignment='Left' Grid.Row='1' VerticalAlignment='Top' Grid.ColumnSpan='2'  Width='600' >");
            
			PushIndent("\t");
			WriteLine("<StackPanel HorizontalAlignment='Center' Width='400' Orientation='Horizontal'>");

				PushIndent("\t");
                WriteLine("<TextBlock VerticalAlignment='Center' Margin='5' Text='Name: ' Width='100'/>");
                WriteLine("<TextBox Margin='5' Text='{Binding SearchItem.Name}' Width='150' />");
				PopIndent();

            WriteLine("</StackPanel>");
            WriteLine("<StackPanel HorizontalAlignment='Center' Width='400' Orientation='Horizontal'>");
				
				PushIndent("\t");
                WriteLine("<TextBlock VerticalAlignment='Center' Margin='5'  Text='Group By: ' Width='100'/>");
                WriteLine("<ComboBox x:Name='comboBoxGroupBy'  Margin='5' VerticalAlignment='Top' HorizontalAlignment='Left'  Width='150' />");
				PopIndent();

            WriteLine("</StackPanel>");
            WriteLine("<StackPanel HorizontalAlignment='Center' Width='400' Orientation='Horizontal'>");
				
				PushIndent("\t");
                WriteLine("<TextBlock VerticalAlignment='Center' Margin='5' Text='Sub Group By: ' Width='100'/>");
                WriteLine("<ComboBox x:Name='comboBoxSubGroupBy' Margin='5' VerticalAlignment='Top' HorizontalAlignment='Left'  Width='150' />");
				PopIndent();

            WriteLine("</StackPanel>");
            WriteLine("<StackPanel HorizontalAlignment='Center' Width='400' Orientation='Horizontal'>");
				
				PushIndent("\t");
                WriteLine("<TextBlock VerticalAlignment='Center' Margin='5' Text=' ' Width='100'/>");
                WriteLine("<Button HorizontalAlignment='Left' VerticalAlignment='Center' Width='75' Margin='5'");
                WriteLine("    Command='{Binding SearchCommand}' Content='Search' />");
				PopIndent();

            WriteLine("</StackPanel>");
			PopIndent();

        WriteLine("</StackPanel>");
	}

	public void RenderResultGrid(string entityName)
	{
		WriteLine(string.Empty);
		WriteLine("<xctk:BusyIndicator Grid.Row='3' Grid.Column='0' Grid.ColumnSpan='2' IsBusy='{Binding IsBusy}' BusyContent='Laoding " + entityName + "...' >");
			
			PushIndent("\t");
            WriteLine("<DataGrid SelectionMode='Single' ItemsSource='{Binding Path=Data}' ");
			WriteLine("	AutoGenerateColumns='False' Margin='8' IsReadOnly='True' ");
            WriteLine("    inf:DataGridColumnsBehavior.BindableColumns='{Binding ColumnCollection}'>");
				
				PushIndent("\t");
                WriteLine("<DataGrid.Columns>");
                    
					WriteLine(string.Empty);
					PushIndent("\t");
					WriteLine("<DataGridTemplateColumn DisplayIndex='0'>");
						
						PushIndent("\t");
                        WriteLine("<DataGridTemplateColumn.HeaderTemplate>");
							
							PushIndent("\t");
                            WriteLine("<DataTemplate>");
								
								PushIndent("\t");
                                WriteLine("<CheckBox  HorizontalAlignment='Center' VerticalAlignment='Center' />");
								PopIndent();

                            WriteLine("</DataTemplate>");
							PopIndent();

                        WriteLine("</DataGridTemplateColumn.HeaderTemplate>");
                        WriteLine("<DataGridTemplateColumn.CellTemplate>");
							
							PushIndent("\t");
                            WriteLine("<DataTemplate>");
								
								PushIndent("\t");
                                WriteLine("<CheckBox HorizontalAlignment='Center' VerticalAlignment='Center'/>");
								PopIndent();

                            WriteLine("</DataTemplate>");
							PopIndent();

                        WriteLine("</DataGridTemplateColumn.CellTemplate>");
						PopIndent();

                    WriteLine("</DataGridTemplateColumn>");

					WriteLine(string.Empty);
                    WriteLine("<DataGridTemplateColumn Header='Action' IsReadOnly='True' >");
						
						PushIndent("\t");
                        WriteLine("<DataGridTemplateColumn.CellTemplate>");
							
							PushIndent("\t");
                            WriteLine("<DataTemplate>");
								
								PushIndent("\t");
                                WriteLine("<TextBlock>");
									
									PushIndent("\t");
                                        WriteLine("<Hyperlink Command='{Binding DataContext.NavigateToDetailCommand, RelativeSource={ RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}'");
                                        WriteLine("    CommandParameter='{Binding Path=" + entityName + "Id}'>Detail</Hyperlink>");
                                        WriteLine("<Hyperlink Command='{Binding DataContext.NavigateToEditCommand, RelativeSource={ RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}'");
                                        WriteLine("    CommandParameter='{Binding Path=" + entityName + "Id}'>Edit</Hyperlink>");
                                        WriteLine("<Hyperlink Command='{Binding DataContext.NavigateToDetailCommand, RelativeSource={ RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}'");
                                        WriteLine("    CommandParameter='{Binding Path=" + entityName + "Id}'>Delete</Hyperlink>");
										PopIndent();

                                WriteLine("</TextBlock>");
								PopIndent();

                            WriteLine("</DataTemplate>");
							PopIndent();

                        WriteLine("</DataGridTemplateColumn.CellTemplate>");
						PopIndent();

                    WriteLine("</DataGridTemplateColumn>");
					PopIndent();

				WriteLine(string.Empty);
                WriteLine("</DataGrid.Columns>");
				PopIndent();

            WriteLine("</DataGrid>");
			PopIndent();

        WriteLine("</xctk:BusyIndicator>");
	}

#>