<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ include file="../../../MultipleOutputFileHelper.tt" #>
<#@ include file="../../../UtilityHelper.tt" #>

<#+

	void RenderJsFunctions()
	{
		WriteLine(string.Empty);
        WriteLine("$scope.WorkflowStateIsNew = function () {");
			
			PushIndent("\t");
            WriteLine("return ($routeParams.detailId == '{New}');");
			PopIndent();

        WriteLine("};");

		WriteLine(string.Empty);
        WriteLine("function onFailedLoad(serverResponse) {");
			
			PushIndent("\t");
            WriteLine("userService.AlertManager.logFailureAlert('', serverResponse.data, []);");
			PopIndent();

        WriteLine("}");

		WriteLine(string.Empty);
        WriteLine("function onSuccessLoad(data) {");
			
			PushIndent("\t");
            WriteLine("$scope.EntityItem = data;");
            WriteLine("$scope.EntityItem.Id = $routeParams.detailId;");
			PopIndent();

        WriteLine("}");

		WriteLine(string.Empty);
        WriteLine("// init");
        WriteLine("if (!$scope.WorkflowStateIsNew()) {");
			
			PushIndent("\t");
            WriteLine("entityService.getById({ detailId: $routeParams.detailId }, onSuccessLoad, onFailedLoad);");
			PopIndent();

        WriteLine("}");

		

		RenderDeleteFunction();
	}

	void RenderDeleteFunction()
	{

		WriteLine(string.Empty);
        WriteLine("$scope.delete = function () {");
			
			PushIndent("\t");
            WriteLine("entityService.delete({ detailId: $routeParams.detailId },");
				
				PushIndent("\t");
                WriteLine("function () {");
					
					PushIndent("\t");
                    WriteLine("userService.AlertManager.addSuccessAlert('Record for ' + $scope.entityName + ' deleted.');");
                    WriteLine("$location.url('/' + $scope.entityUrl + '/search');");
					PopIndent();

                WriteLine("},");
                WriteLine("function onFailedDelete(errorResponse) {");
					
					PushIndent("\t");
                    WriteLine("userService.AlertManager.addFailureAlert('Record for ' + $scope.entityName + ' failed to delete.' + [JSON.stringify(errorResponse)]);");
					PopIndent();

                WriteLine("});");
				PopIndent();

			PopIndent();

        WriteLine("};");

	}

	void RenderDetailController(string entityName)
	{

		WriteLine("'use strict';");

		WriteLine(string.Empty);
		WriteLine("angular.module('rootAppShell')");
			
			PushIndent("\t");
			WriteLine(".controller('detail" + entityName + "Ctrl', [");
				
				PushIndent("\t");
				WriteLine("'$location', '$scope', '$injector', '$routeParams', 'userService',");
				WriteLine("function ($location, $scope, $injector, $routeParams, userService) {");
		
					WriteLine(string.Empty);			
					PushIndent("\t");

					var compatibleEntityName = GetFileCompatibleEntityName(entityName);

					WriteLine("$scope.entityName = '" + entityName + "';");
					WriteLine("var entityService = $injector.get('" + compatibleEntityName + "Service');");

					WriteLine("$scope.entityUrl = $scope.entityName;");
					WriteLine("if ($routeParams.moduleName != undefined) {");
					WriteLine("    $scope.entityUrl = $routeParams.moduleName + '/' + $scope.entityUrl;");
					WriteLine("}");

					RenderJsFunctions();

					WriteLine(string.Empty);
					PopIndent();

				WriteLine("}");
				PopIndent();
				
			WriteLine("]);");
	}

#>

<#+

	void RenderDetailControllers(string[] entities)
	{
		if(entities != null && entities.Length > 0)
		{	
			var manager = Manager.Create(Host, GenerationEnvironment);
			foreach(string entityName in entities)
			{	
				manager.StartNewFile("detail" + entityName + "Ctrl.js");
				this.RenderDetailController(entityName);
			}

			manager.Process(true);
		}
	}

#>