<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Framework.Components.DataAccess" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)\Framework.Components.DataAccess.dll" #>
<#@ include file="MultipleOutputFileHelper.tt" #>
<#+

	void GetClassProperties(string nameSpace, string className)
	{

		
	}

	void RenderUsingTags(string dataModelNameSpace)
	{
		WriteLine("using System;");
		WriteLine("using System.Collections.Generic;");
		WriteLine("using System.Linq;");
		WriteLine("using System.Text;");
		WriteLine("using System.Data;");
		WriteLine("using Dapper;");
		WriteLine("using Library.CommonServices.Utils;");
		WriteLine("using Framework.Components.DataAccess;");
		WriteLine("using DataModel.Framework.DataAccess;");
		WriteLine("using " + dataModelNameSpace + ";");
		WriteLine(string.Empty);
	}

	void RenderToSQLParameterMethod(string tableName, PropertyInfo[] properties)
	{

		WriteLine("#region ToSQLParameter"); 
		
		WriteLine(string.Empty);
		WriteLine("public static string ToSQLParameter(" + tableName + "DataModel data, string dataColumnName)"); 
        WriteLine("{"); 

			PushIndent("\t");
            WriteLine("var returnValue = \"NULL\";"); 

			WriteLine(string.Empty);
            WriteLine("switch (dataColumnName)"); 
            WriteLine("{"); 
				
				PushIndent("\t");

				foreach (var propInfo in properties)
				{

					if(propInfo.Name != "ApplicationId" && propInfo.Name != "EntityKey")
					{

						WriteLine("case " + tableName + "DataModel.DataColumns." + propInfo.Name + ":"); 
					
							PushIndent("\t");

							if(propInfo.PropertyType.ToString() == "System.Int32" || propInfo.PropertyType.ToString() == "System.Decimal")
							{
								WriteLine("returnValue = string.Format(SQL_TEMPLATE_PARAMETER_NUMBER, " + tableName + "DataModel.DataColumns." + propInfo.Name + ", data." + propInfo.Name + ");"); 
							}						
							else if(propInfo.PropertyType.ToString() == "System.Nullable`1[System.Int32]" || propInfo.PropertyType.ToString() == "System.Nullable`1[System.Decimal]")
							{
								WriteLine("if (data." + propInfo.Name + " != null)"); 
								WriteLine("{"); 

									PushIndent("\t");
									WriteLine("returnValue = string.Format(SQL_TEMPLATE_PARAMETER_NUMBER, " + tableName + "DataModel.DataColumns." + propInfo.Name + ", data." + propInfo.Name + ");"); 
									PopIndent(); 

								WriteLine("}"); 
								WriteLine("else"); 
								WriteLine("{"); 
                        
									PushIndent("\t");
									WriteLine("returnValue = string.Format(SQL_TEMPLATE_PARAMETER_NULL, " + tableName + "DataModel.DataColumns." + propInfo.Name + ");"); 
									PopIndent(); 

								WriteLine("}"); 
							}
							else if(propInfo.PropertyType.ToString() == "System.String") 
							{
								WriteLine("if (!string.IsNullOrEmpty(data." + propInfo.Name + "))");
								WriteLine("{");
								
									PushIndent("\t");
									WriteLine("returnValue = string.Format(SQL_TEMPLATE_PARAMETER_STRING_OR_DATE, " + tableName + "DataModel.DataColumns." + propInfo.Name + ", data." + propInfo.Name + ");");
									PopIndent(); 

								WriteLine("}");
								WriteLine("else");
								WriteLine("{");
								
									PushIndent("\t");
									WriteLine("returnValue = string.Format(SQL_TEMPLATE_PARAMETER_NULL, " + tableName + "DataModel.DataColumns." + propInfo.Name + ");");
									PopIndent(); 

								WriteLine("}");
							}
							else if(propInfo.PropertyType.ToString() == "System.DateTime" || propInfo.PropertyType.ToString() == "System.Nullable`1[System.DateTime]")
							{
								WriteLine("if (data." + propInfo.Name + " != null)");
								WriteLine("{");
								
									PushIndent("\t");
									WriteLine("returnValue = string.Format(SQL_TEMPLATE_PARAMETER_STRING_OR_DATE, " + tableName + "DataModel.DataColumns." + propInfo.Name + ", data." + propInfo.Name + ");");
									PopIndent(); 

								WriteLine("}");
								WriteLine("else");
								WriteLine("{");
								
									PushIndent("\t");
									WriteLine("returnValue = string.Format(SQL_TEMPLATE_PARAMETER_NULL, " + tableName + "DataModel.DataColumns." + propInfo.Name + ");");
									PopIndent(); 

								WriteLine("}");
							}	

						
							WriteLine("break;");											
							PopIndent(); 

							WriteLine(string.Empty);
						} 

					} 

				WriteLine(string.Empty);
                WriteLine("default:"); 

					PushIndent("\t");
                    WriteLine("returnValue = BaseDataManager.ToSQLParameter(data, dataColumnName);"); 
                    WriteLine("break;"); 
					PopIndent(); 
				PopIndent(); 

            WriteLine("}"); 

			WriteLine(string.Empty);
            WriteLine("return returnValue;"); 

			PopIndent(); 
		WriteLine(string.Empty);
        WriteLine("}"); 

		WriteLine(string.Empty);
		WriteLine("#endregion"); 

	}	

	void RenderGetEntityDetailsMethod(string tableName, PropertyInfo[] properties)
	{
		WriteLine("#region Get Entity Details"); 

		WriteLine(string.Empty);
		WriteLine("public static List<" + tableName + "DataModel> GetEntityDetails(" + tableName + "DataModel dataQuery, RequestProfile requestProfile, int returnAuditInfo = BaseDataManager.ReturnAuditInfoOnDetails)");
        WriteLine("{");

			PushIndent("\t");
			WriteLine("const string sql = @\"dbo." + tableName + "Search \";");

			WriteLine(string.Empty);
			WriteLine("var parameters =");
			WriteLine("new");
			WriteLine("{");

				PushIndent("\t");
				WriteLine("	AuditId                 = requestProfile.AuditId");
				WriteLine(" ,	ApplicationId           = requestProfile.ApplicationId");
				WriteLine(" ,	ReturnAuditInfo         = returnAuditInfo");
				foreach (var propInfo in properties)
				{
					if(propInfo.Name != "ApplicationId" && propInfo.Name != "EntityKey")
					{					
						var attributes = propInfo.GetCustomAttributes(false);
						var columnMapping = attributes.FirstOrDefault(a => a.GetType() == typeof(Framework.Components.DataAccess.IncludeInSearch));
						if(columnMapping != null)
						{
							WriteLine(" ,	" + propInfo.Name + "           = dataQuery." + propInfo.Name);
						}

						var columnMapping2 = attributes.FirstOrDefault(a => a.GetType() == typeof(Framework.Components.DataAccess.DateRange));
						if(columnMapping2 != null)
						{
							var fromSearchColumn = ((Framework.Components.DataAccess.DateRange)columnMapping2).FromSearchColumn;
							var toSearchColumn = ((Framework.Components.DataAccess.DateRange)columnMapping2).ToSearchColumn; 

							WriteLine(" ,	" + fromSearchColumn + "           = dataQuery." + fromSearchColumn);
							WriteLine(" ,	" + toSearchColumn + "           = dataQuery." + toSearchColumn);
						}
					}
				}
				PopIndent();

			WriteLine("};");

			WriteLine(string.Empty);
			WriteLine("List<" + tableName + "DataModel> result;");

			WriteLine("using (var dataAccess = new DataAccessBase(DataStoreKey))");
			WriteLine("{");

				PushIndent("\t");
				WriteLine("result = dataAccess.Connection.Query<" + tableName + "DataModel>(sql, parameters, commandType: CommandType.StoredProcedure).ToList();");
				PopIndent();

			WriteLine("}");

			WriteLine(string.Empty);
			WriteLine("return result;");

			PopIndent();
			
		WriteLine(string.Empty);
		WriteLine("}");

		WriteLine(string.Empty);
		WriteLine("#endregion");
	}
		
	void RenderGetListMethod(string tableName)
	{
		WriteLine("#region Get List"); 

		WriteLine(string.Empty);
		WriteLine("public static List<" + tableName + "DataModel> GetList(RequestProfile requestProfile)");
        WriteLine("{");

			PushIndent("\t");

			WriteLine("return GetEntityDetails(" + tableName + "DataModel.Empty, requestProfile, 0);");			

			PopIndent();

		WriteLine("}");

		WriteLine(string.Empty);
		WriteLine("#endregion");
	}

	void RenderDetailsMethod(string tableName)
	{
		WriteLine("#region Get Details"); 

		WriteLine(string.Empty);
		WriteLine("public static " + tableName + "DataModel GetDetails(" + tableName + "DataModel data, RequestProfile requestProfile)");
        WriteLine("{");

			PushIndent("\t");

			WriteLine("var list = GetEntityDetails(data, requestProfile, 1);");			
            WriteLine("return list.FirstOrDefault();");

			PopIndent();

		WriteLine("}");

		WriteLine(string.Empty);
		WriteLine("#endregion");
	}

	void RenderSearchMethod(string tableName)
	{
		WriteLine("#region Search"); 

		WriteLine(string.Empty);
		WriteLine("public static DataTable Search(" + tableName + "DataModel data, RequestProfile requestProfile)");
        WriteLine("{");

			PushIndent("\t");

			WriteLine("var list = GetEntityDetails(data, requestProfile, 0);");			
            WriteLine("return list.ToDataTable();");

			PopIndent();

		WriteLine("}");

		WriteLine(string.Empty);
		WriteLine("#endregion");
	}
	
	void RenderSaveMethod(string tableName, PropertyInfo[] properties)
	{
		WriteLine("#region Save"); 
		WriteLine(string.Empty);

		bool hasCode = false;

		foreach (var propInfo in properties)
			{
				if(propInfo.Name == "Code")
				{		
					WriteLine("public static void FormatData(" + tableName + "DataModel data)");
					WriteLine("{");

					PushIndent("\t");

					WriteLine("data.Code = Formatter.FormatCode(data.Code);");

					PopIndent();

					WriteLine("}");

					hasCode = true;
				}
			}
				
		WriteLine(string.Empty);
		WriteLine("public static string Save(" + tableName + "DataModel data, string action, RequestProfile requestProfile)");
        WriteLine("{");

			PushIndent("\t");

			WriteLine(string.Empty);
			WriteLine("var sql = \"EXEC \";");
			WriteLine(string.Empty);

			if(hasCode)
			{
				WriteLine("FormatData(data);");
			}

			WriteLine(string.Empty);

            WriteLine("switch (action)");
            WriteLine("{");

				PushIndent("\t");
                WriteLine("case \"Create\":");
					
					PushIndent("\t");
                    WriteLine("sql += \"dbo." + tableName + "Insert  \" +");
						
						PushIndent("\t");
                        WriteLine("\" \" + ToSQLParameter(BaseDataModel.BaseDataColumns.AuditId, requestProfile.AuditId) +");
                        WriteLine("\", \" + ToSQLParameter(BaseDataModel.BaseDataColumns.ApplicationId, requestProfile.ApplicationId);");
						PopIndent();

                    WriteLine("break;");
					PopIndent();

				WriteLine(string.Empty);
                WriteLine("case \"Update\":");
					
					PushIndent("\t");
                    WriteLine("sql += \"dbo." + tableName + "Update  \" +");
						
						PushIndent("\t");
                        WriteLine("\" \" + ToSQLParameter(BaseDataModel.BaseDataColumns.AuditId, requestProfile.AuditId);");
						PopIndent();

                    WriteLine("break;");
					PopIndent();

				WriteLine(string.Empty);
                WriteLine("default:");
					
					PushIndent("\t");
                    WriteLine("break;");
					PopIndent();
				PopIndent();

            WriteLine("}");

			WriteLine("sql = sql + \", \" + ToSQLParameter(data, " + tableName + "DataModel.DataColumns." + tableName + "Id); ");

			foreach (var propInfo in properties)
			{
				if(propInfo.Name != "ApplicationId" && propInfo.Name != "EntityKey" && propInfo.Name !=  tableName + "Id")
				{					
					var attributes = propInfo.GetCustomAttributes(false);
					var columnMapping = attributes.FirstOrDefault(a => a.GetType() == typeof(OnlyProperty));
					if(columnMapping == null)
					{
						WriteLine("sql = sql + \", \" + ToSQLParameter(data, " + tableName + "DataModel.DataColumns." + propInfo.Name + "); ");
					}
				}
			}

			WriteLine(string.Empty);
            WriteLine("return sql;");

			PopIndent();
		
		WriteLine("}");

		WriteLine(string.Empty);
		WriteLine("#endregion");
	}	

	void RenderCreateMethod(string tableName)
	{
		WriteLine("#region Create"); 

		WriteLine(string.Empty);
		WriteLine("public static int Create(" + tableName + "DataModel data, RequestProfile requestProfile)");
        WriteLine("{");

			PushIndent("\t");

			WriteLine("var sql = Save(data, \"Create\", requestProfile);");
            WriteLine("var newId = DBDML.RunScalarSQL(\"" + tableName + ".Insert\", sql, DataStoreKey);");
            WriteLine("return Convert.ToInt32(newId);");

			PopIndent();

		WriteLine("}");

		WriteLine(string.Empty);
		WriteLine("#endregion");
	}

	void RenderUpdateMethod(string tableName)
	{
		WriteLine("#region Update"); 

		WriteLine(string.Empty);
		WriteLine("public static void Update(" + tableName + "DataModel data, RequestProfile requestProfile)");
        WriteLine("{");

			PushIndent("\t");

			WriteLine("var sql = Save(data, \"Update\", requestProfile);");
            WriteLine("DBDML.RunSQL(\"" + tableName + ".Update\", sql, DataStoreKey);");

			PopIndent();

		WriteLine("}");

		WriteLine(string.Empty);
		WriteLine("#endregion");
	}	

	void RenderDeleteMethod(string tableName, PropertyInfo[] properties, bool isCrossReference)
	{
		WriteLine("#region Delete"); 

		WriteLine(string.Empty);
		WriteLine("public static void Delete(" + tableName + "DataModel data, RequestProfile requestProfile)");
        WriteLine("{");
			
			PushIndent("\t");
			WriteLine(string.Empty);
			WriteLine("const string sql = @\"dbo." + tableName + "Delete \";"); 

			WriteLine(string.Empty);
            WriteLine("var parameters ="); 
            WriteLine("new"); 
            WriteLine("{"); 
				
				PushIndent("\t");
                WriteLine("	AuditId = requestProfile.AuditId"); 

				if(!isCrossReference)
				{
					WriteLine(",   " + tableName + "Id  = data." + tableName + "Id");
				}
				else
				{
					foreach (var propInfo in properties)
					{
						if(propInfo.Name != "ApplicationId" && propInfo.Name != "EntityKey")
						{					
							var attributes = propInfo.GetCustomAttributes(false);
							var columnMapping = attributes.FirstOrDefault(a => a.GetType() == typeof(Framework.Components.DataAccess.IncludeInSearch));
							if(columnMapping != null)
							{
								WriteLine(" ,	" + propInfo.Name + "           = data." + propInfo.Name);
							}
						}
					}
				}
				PopIndent();
				 
            WriteLine("};"); 

			WriteLine(string.Empty);
            WriteLine("using (var dataAccess = new DataAccessBase(DataStoreKey))"); 
            WriteLine("{"); 
				
				PushIndent("\t");
                WriteLine("dataAccess.Connection.Execute(sql, parameters, commandType: CommandType.StoredProcedure);"); 
				PopIndent();

            WriteLine("}"); 

			PopIndent();

		WriteLine("}");

		WriteLine(string.Empty);
		WriteLine("#endregion");
	}	

	void RenderDoesExistMethod(string tableName, PropertyInfo[] properties)
	{
		WriteLine("#region Does Exist"); 

		WriteLine(string.Empty);
		WriteLine("public static bool DoesExist(" + tableName + "DataModel data, RequestProfile requestProfile)");
        WriteLine("{");
			
			PushIndent("\t");

			WriteLine("var doesExistRequest = new " + tableName + "DataModel();");
			WriteLine("doesExistRequest.ApplicationId = data.ApplicationId;");

			foreach (var propInfo in properties)
			{
				if(propInfo.Name != "ApplicationId" && propInfo.Name != "EntityKey")
				{					
					var attributes = propInfo.GetCustomAttributes(false);
					var columnMapping = attributes.FirstOrDefault(a => a.GetType() == typeof(Framework.Components.DataAccess.IncludeInUnique));
					if(columnMapping != null)
					{
						WriteLine("doesExistRequest." + propInfo.Name + "  = data." + propInfo.Name + ";");
					}
				}
			}

			WriteLine(string.Empty);
            WriteLine("var list = GetEntityDetails(doesExistRequest, requestProfile, 0);");
			
			WriteLine(string.Empty);
            WriteLine("return list.Count > 0;");

			PopIndent();

		WriteLine("}");

		WriteLine(string.Empty);
		WriteLine("#endregion");
	}

	void RenderNonStandardClass(string tableName, string dataModelNameSpace, bool isCrossReference, bool flagForDetailsMethod)
	{
		var className = tableName + "DataModel";

		foreach (Assembly currentassembly in AppDomain.CurrentDomain.GetAssemblies()) 
		{
			var modelType = currentassembly.GetType(dataModelNameSpace + "." + className);
			if(modelType != null)
			{
				var properties = modelType.GetProperties();

				if(properties.Length > 0)
				{
				
					PushIndent("\t");
					WriteLine("public partial class " + tableName + "DataManager : BaseDataManager");                           
					WriteLine("{"); 

						PushIndent("\t");   
						WriteLine(string.Empty);

						WriteLine("private static readonly string DataStoreKey = string.Empty;");

						WriteLine(string.Empty);

						WriteLine("static " + tableName + "DataManager()"); 
						WriteLine("{"); 
				
							PushIndent("\t");
							WriteLine("DataStoreKey = SetupConfiguration.GetDataStoreKey(\"" + tableName + "\");"); 
							PopIndent(); 

						WriteLine("}"); 

						WriteLine(string.Empty);
						RenderToSQLParameterMethod(tableName, properties);
													
						WriteLine(string.Empty);
						RenderGetEntityDetailsMethod(tableName, properties);

						WriteLine(string.Empty);
						RenderGetListMethod(tableName);

						WriteLine(string.Empty);
						RenderSearchMethod(tableName);

						if(flagForDetailsMethod)
						{
							WriteLine(string.Empty);
							RenderDetailsMethod(tableName);
						}

						WriteLine(string.Empty);
						RenderSaveMethod(tableName, properties);

						WriteLine(string.Empty);
						RenderCreateMethod(tableName);

						WriteLine(string.Empty);
						RenderUpdateMethod(tableName);

						WriteLine(string.Empty);
						RenderDeleteMethod(tableName, properties, isCrossReference);

						WriteLine(string.Empty);
						RenderDoesExistMethod(tableName, properties);
			
						WriteLine(string.Empty);
						PopIndent(); 

					WriteLine("}"); 
					PopIndent(); 

				}			

				break;
			}
		}

	}

#>

<#+

	public void GenerateNonStandardDataManagerFiles(string nameSpaceDataManager, string dataModelNameSpace, string[] entities, bool flagForDetailsMethod = true)
	{
		if(entities != null && entities.Length > 0)
		{	
			var manager = Manager.Create(Host, GenerationEnvironment);

			foreach(string entityName in entities)
			{	
				manager.StartNewFile(entityName + "DataManager.generated.cs");
				this.GenerateNonStandardDataManagerClass(nameSpaceDataManager, dataModelNameSpace, entityName, false, flagForDetailsMethod);
			}

			manager.Process(true);
		}
	}

	public void GenerateCrossReferenceDataManagerFiles(string nameSpaceDataManager, string dataModelNameSpace, string[] entities, bool flagForDetailsMethod = true)
	{
		if(entities != null && entities.Length > 0)
		{	
			var manager = Manager.Create(Host, GenerationEnvironment);

			foreach(string entityName in entities)
			{	
				manager.StartNewFile(entityName + "DataManager.generated.cs");
				this.GenerateNonStandardDataManagerClass(nameSpaceDataManager, dataModelNameSpace, entityName, true, flagForDetailsMethod);
			}

			manager.Process(true);
		}
	}

	void GenerateNonStandardDataManagerClass(string nameSpace, string dataModelNameSpace, string tableName, bool isCrossReference, bool flagForDetailsMethod)
    {
		RenderUsingTags(dataModelNameSpace);

		WriteLine("namespace " + nameSpace);
		WriteLine("{");  

		RenderNonStandardClass(tableName, dataModelNameSpace, isCrossReference, flagForDetailsMethod);

		WriteLine("}");
		PopIndent();
	}

#>